import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources';

@Injectable()
export class OpenAiService {
  private openai: OpenAI;

  constructor(private configService: ConfigService) {
    this.openai = new OpenAI({
      apiKey: this.configService.get<string>('OPENAI_API_KEY'),
      // baseURL: '',
    });
  }

  async createCoursePlan(
    nativeLanguage: string,
    targetLanguage: string,
    months: number,
    available_days: number[],
    level: string,
    userId: string,
  ) {
    const lessonsPerWeek = available_days.length;
    const totalLessons = months * 4 * lessonsPerWeek;

    //     const prompt = `
    // You are an expert language course designer.
    // Design a fully detailed and interactive language course for a student whose native language is "${nativeLanguage}" and who wants to learn "${targetLanguage}".
    // The course should last for ${months} month(s) with ${lessonsPerWeek} lesson(s) per week, for a total of ${totalLessons} lessons.

    // Output a JSON object with the following structure (do not include any markdown formatting, code fences, comments, or extra text):
    // {
    //   "courseTitle": "string",            // Overall course title
    //   "courseOverview": "string",         // A brief overview of the course
    //   "lessons": [
    //     {
    //       "title": "string",              // e.g., "Introduction to English"
    //       "plan": "string",             // Detailed lesson plan with interactive tasks and all necessary content
    //       "controlQuestion": "string"   // Control question for the lesson
    //     }
    //     // Do not include any additional text or comments.
    //   ]
    // }

    // Ensure that the output is a valid JSON object and includes all lessons without any extra text.
    // `;
    const prompt = `
You are an expert language course designer.

Design a fully detailed and interactive language course for a student whose native language is "${nativeLanguage}" and who wants to learn "${targetLanguage}". 
The student’s current language proficiency level is "${level}", based on the CEFR scale (e.g., A1, A2, B1, etc.). The content of the course — including vocabulary, grammar, and communication goals — must match this level. If the level is low (e.g., A1), keep the course simple and beginner-friendly. If the level is higher (e.g., B2 or C1), make the lessons more complex and advanced.

The entire course content (including course title, overview, lesson titles, lesson plans, and control questions) must be written in "${nativeLanguage}" to ensure full understanding by the student.

The course should last for ${months} month(s) with ${lessonsPerWeek} lesson(s) per week, for a total of ${totalLessons} lessons.

Each lesson must include a deeply detailed and clearly structured plan. Each plan should follow this format:
- Introduction to the topic (explain why it's important and how it will help the learner)
- Main explanation (grammar rules, vocabulary, or real-life context)
- Clear examples with translation
- Interactive tasks (fill-in-the-blank, translation, role-play dialogues, etc.)
- Mini-summary of the key takeaways

Make sure the content is practical, logically structured, appropriate for the student’s level (${level}), and easy to turn into an actual teaching session.

Output a JSON object with the following structure (do not include any markdown formatting, code fences, comments, or extra text):
{
  "courseTitle": "string",            // Overall course title
  "courseOverview": "string",         // A brief overview of the course
  "lessons": [
    {
      "title": "string",              // e.g., "Introduction to English"
      "plan": "string",               // Deeply structured and rich lesson plan, as described above
      "controlQuestion": "string"     // A meaningful question to check understanding of the lesson
    }
    // Do not include any additional text or comments.
  ]
}

Ensure that the output is a valid JSON object and includes all lessons without any extra text.
`;

    try {
      const messages: ChatCompletionMessageParam[] = [
        {
          role: 'system',
          content: 'You are a helpful assistant specialized in designing interactive language courses.',
        },
        { role: 'user', content: prompt },
      ];

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages,
        // max_tokens: 35096,
        // max_completion_tokens: 15000,
        stop: ['\n\n'],
      });

      const coursePlanText = response.choices[0]?.message?.content;
      if (!coursePlanText) {
        throw new Error('No course plan was generated by OpenAI.');
      }
      console.log(coursePlanText);

      let cleanText = coursePlanText.trim();
      let parsedCoursePlan;

      if (typeof cleanText === 'string') {
        if (cleanText.startsWith('```') && cleanText.endsWith('```')) {
          const lines = cleanText.split('\n');
          if (lines[0].startsWith('```')) {
            lines.shift();
          }
          if (lines[lines.length - 1].startsWith('```')) {
            lines.pop();
          }
          cleanText = lines.join('\n').trim();
        }
        cleanText = cleanText
          .split('\n')
          .filter((line) => !line.trim().startsWith('//'))
          .join('\n')
          .trim();

        const lastBrace = cleanText.lastIndexOf('}');
        if (lastBrace !== -1) {
          cleanText = cleanText.substring(0, lastBrace + 1);
        }

        try {
          parsedCoursePlan = JSON.parse(cleanText);
        } catch (jsonErr) {
          if (cleanText === '[object Object]') {
            parsedCoursePlan = coursePlanText;
          } else {
            throw new Error(`Failed to parse JSON output: ${jsonErr}`);
          }
        }
      } else {
        parsedCoursePlan = cleanText;
      }

      const finalCourse = {
        user_id: userId,
        title: parsedCoursePlan.courseTitle || 'Untitled Course',
        description: parsedCoursePlan.courseOverview || 'No overview provided',
        lessons: parsedCoursePlan.lessons,
        available_days: available_days,
        lang: targetLanguage,
        level: level,
        month: months,
        status: 'active',
        user_lang: nativeLanguage,
      };

      return finalCourse;
    } catch (err) {
      if (err instanceof OpenAI.APIError) {
        throw new Error(`OpenAI error: ${err.message}`);
      }
      throw err;
    }
  }

  async createLessonContent(
    plan: string,
    controlQuestion: string,
    nativeLanguage: string,
    targetLanguage: string,
    level: string,
  ): Promise<{
    lessonContent: { lessonContent: string; lessonTitle: string; homework: string; controlQuestion: string };
  }> {
    const prompt = `
You are a professional and creative language instructor.

Generate a full, detailed language lesson based on the following lesson plan:
"${plan}"

The student’s native language is "${nativeLanguage}", and they are learning "${targetLanguage}". 
The student’s language proficiency level is "${level}" according to the CEFR scale (e.g., A1, A2, B1, etc.).

The entire lesson (including the title, content, instructions, and homework) must be written mostly in "${nativeLanguage}" to ensure full understanding. However, include necessary parts in "${targetLanguage}" such as vocabulary, sample dialogues, or examples.

The lesson must be appropriate for the student's current level (${level}):
- If the level is beginner (A1–A2), explanations should be simple and fundamental.
- If intermediate (B1–B2), explanations and activities should be more challenging and rich in real-life context.
- If advanced (C1–C2), focus on nuance, fluency, and complex linguistic structures.

The lesson should be **comprehensive enough to engage the student for approximately 45–60 minutes**. It must contain sufficient material, exercises, and interactive elements to cover that amount of time meaningfully.

At the end of the lesson, the student must be able to confidently answer the following control question:
"${controlQuestion}"

The lesson should:
- Be structured professionally (introduction, explanation, guided practice, interactive tasks, summary).
- Contain clear, engaging, and learner-friendly explanations.
- Include vocabulary, grammar, or situational language use as relevant.
- Offer fun and interactive activities.
- Contain a short, relevant homework task to reinforce learning.
- Include **the exact same control question** at the end to assess comprehension.
- Use a light touch of humor (max one or two small jokes) to keep the tone friendly but focused.

Output a JSON object in the following format (do not include any markdown, code blocks, or extra text):
{
  "lessonTitle": "string",          // Title of the lesson in nativeLanguage
  "lessonContent": "string",        // Full structured lesson content with explanations, examples, and interactive elements
  "homework": "string",             // A simple, relevant homework task in nativeLanguage
  "controlQuestion": "string"       // The same controlQuestion repeated at the end
}

Ensure the response is a valid JSON object and includes only the lesson.
`;

    const messages: ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content: 'You are a helpful educator specialized in interactive lesson creation.',
      },
      { role: 'user', content: prompt },
    ];

    const response = await this.openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      max_tokens: 3500,
    });

    const lessonContent = response.choices[0]?.message?.content;
    if (!lessonContent) {
      throw new Error('No lesson content was generated by OpenAI.');
    }

    return { lessonContent: JSON.parse(lessonContent.trim()) };
  }

  async answerLessonQuestion(
    plan: string,
    controlQuestion: string,
    answer: string,
    targetLanguage: string,
    nativeLanguage: string,
    level: string,
  ) {
    const prompt = `
You are an expert educator specialized in evaluating student performance in language learning.

Below is the lesson plan, a control question, and a student's answer. The student is learning "${targetLanguage}" and their current level is "${level}" (based on the CEFR scale). Their native language is "${nativeLanguage}".

The student’s answer may be written in either their native language ("${nativeLanguage}") or the target language ("${targetLanguage}"). Consider this when evaluating the response.

Lesson Plan: ${plan}
Control Question: ${controlQuestion}
Student's Answer: ${answer}

Evaluate the student's answer with a thoughtful and supportive review that includes:
- An assessment of the correctness and completeness of the answer, based on the lesson plan and the control question.
- A short evaluation of the language used: grammar, vocabulary, and structure — appropriate for level ${level}, if applicable.
- Friendly, constructive recommendations for improvement if needed.
- A fair grade on the American grading scale (A, B, C, D, F), with a clear explanation of how it was determined.

Output your evaluation as plain text in the following format:

Evaluation:
[Your detailed evaluation here]

Language Feedback:
[Grammar, vocabulary, structure — evaluated relative to level if the answer is in ${targetLanguage}]

Recommendations:
[Actionable tips for improvement, if any]

Grade:
[Letter grade with explanation]

Use an encouraging and motivating tone. The student should feel supported and understand what they did well, and what can be improved before moving on to the next lesson.
`;

    const messages: ChatCompletionMessageParam[] = [
      {
        role: 'system',
        content: 'You are a helpful educator specialized in interactive lesson creation.',
      },
      { role: 'user', content: prompt },
    ];

    const response = await this.openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      max_tokens: 3500,
    });

    const lessonReview = response.choices[0]?.message?.content;
    if (!lessonReview) {
      throw new Error('No lesson content was generated by OpenAI.');
    }
    console.log(lessonReview);

    return { review: lessonReview.trim() };
  }
}
