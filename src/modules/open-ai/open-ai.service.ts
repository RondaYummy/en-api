import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import OpenAI from 'openai';
import { ChatCompletionMessageParam } from 'openai/resources';

@Injectable()
export class OpenAiService {
  private openai: OpenAI;

  constructor(private configService: ConfigService) {
    this.openai = new OpenAI({
      apiKey: this.configService.get<string>('OPENAI_API_KEY'),
      // baseURL: '',
    });
  }

  async createCoursePlan(
    nativeLanguage: string,
    targetLanguage: string,
    months: number,
    available_days: number[],
    level: string,
    userId: string,
  ) {
    const lessonsPerWeek = available_days.length;
    const totalLessons = months * 4 * lessonsPerWeek;

    const prompt = `
You are an expert language course designer.
Design a fully detailed and interactive language course for a student whose native language is "${nativeLanguage}" and who wants to learn "${targetLanguage}". 
The course should last for ${months} month(s) with ${lessonsPerWeek} lesson(s) per week, for a total of ${totalLessons} lessons.

Output a JSON object with the following structure (do not include any markdown formatting, code fences, comments, or extra text):
{
  "courseTitle": "string",            // Overall course title
  "courseOverview": "string",         // A brief overview of the course
  "lessons": [
    {
      "title": "string",              // e.g., "Introduction to English"
      "plan": "string",             // Detailed lesson plan with interactive tasks and all necessary content
      "controlQuestion": "string"   // Control question for the lesson
    }
    // Do not include any additional text or comments.
  ]
}

Ensure that the output is a valid JSON object and includes all lessons without any extra text.
`;

    try {
      const messages: ChatCompletionMessageParam[] = [
        {
          role: 'system',
          content: 'You are a helpful assistant specialized in designing interactive language courses.'
        },
        { role: 'user', content: prompt }
      ];

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages,
        // max_tokens: 15096,
        // max_completion_tokens: 15000,
        stop: ['\n\n'],
      });

      const coursePlanText = response.choices[0]?.message?.content;
      if (!coursePlanText) {
        throw new Error('No course plan was generated by OpenAI.');
      }
      console.log(typeof coursePlanText, coursePlanText);

      let cleanText = coursePlanText.trim();
      let parsedCoursePlan;

      if (typeof cleanText === 'string') {
        // Видаляємо markdown code fences, якщо вони є
        if (cleanText.startsWith("```") && cleanText.endsWith("```")) {
          const lines = cleanText.split('\n');
          if (lines[0].startsWith("```")) {
            lines.shift();
          }
          if (lines[lines.length - 1].startsWith("```")) {
            lines.pop();
          }
          cleanText = lines.join('\n').trim();
        }
        // Видаляємо рядки, що починаються з "//"
        cleanText = cleanText
          .split('\n')
          .filter(line => !line.trim().startsWith('//'))
          .join('\n')
          .trim();

        // Додатково обрізаємо рядок до останнього символу "}"
        const lastBrace = cleanText.lastIndexOf('}');
        if (lastBrace !== -1) {
          cleanText = cleanText.substring(0, lastBrace + 1);
        }

        try {
          parsedCoursePlan = JSON.parse(cleanText);
        } catch (jsonErr) {
          // Якщо cleanText дорівнює "[object Object]", використаємо coursePlanText як об’єкт
          if (cleanText === "[object Object]") {
            parsedCoursePlan = coursePlanText;
          } else {
            throw new Error(`Failed to parse JSON output: ${jsonErr}`);
          }
        }
      } else {
        parsedCoursePlan = cleanText;
      }

      console.log(parsedCoursePlan, 'parsedCoursePlan');

      const finalCourse = {
        user_id: userId,
        title: parsedCoursePlan.courseTitle || 'Untitled Course',
        description: parsedCoursePlan.courseOverview || 'No overview provided',
        lessons: parsedCoursePlan.lessons,
        available_days: available_days,
        lang: targetLanguage,
        level: level,
        month: months,
        status: 'active',
        user_lang: nativeLanguage
      };

      return finalCourse;
    } catch (err) {
      if (err instanceof OpenAI.APIError) {
        throw new Error(`OpenAI error: ${err.message}`);
      }
      throw err;
    }
  }
}
