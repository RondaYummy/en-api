import { Injectable } from '@nestjs/common';
import { CreateApiCourseDto } from './dto/create-course.dto';
import { OpenAiService } from '../open-ai/open-ai.service';
import { CoursesRepository } from './courses.repository';
import { AnswerLessonDto } from './dto/answer-question.dto';

export interface Lesson {
  plan: string;
  controlQuestion: string;
  title: string;
}

@Injectable()
export class CoursesService {
  constructor(
    private readonly openAiService: OpenAiService,
    private readonly coursesRepository: CoursesRepository,
  ) {}

  async createCourse(data: CreateApiCourseDto, userId: string) {
    const course = await this.openAiService.createCoursePlan(
      data.user_lang,
      data.lang,
      data.month,
      data.available_days,
      data.level,
      userId,
    );
    const savedCourse = await this.coursesRepository.createCourse(course, userId);
    return savedCourse;
  }

  async findActiveCourses(userId: string) {
    return await this.coursesRepository.findActiveCourses(userId);
  }

  async findCompletedCourses(userId: string) {
    return await this.coursesRepository.findCompletedCourses(userId);
  }

  async getUserCourseLessons(userId: string) {
    return await this.coursesRepository.findCourses(userId);
  }

  async getUserCourse(userId: string, courseId: string) {
    return await this.coursesRepository.findCourse(userId, courseId);
  }

  async findLessonsByCourse(courseId: string, userId: string) {
    return await this.coursesRepository.findLessonsByCourse(courseId, userId);
  }

  async answerLessonQuestion(userId: string, lessonId: string, body: AnswerLessonDto) {
    const lesson = await this.coursesRepository.findLessonById(lessonId, userId);
    const course = await this.getUserCourse(userId, lesson.course_id);
    if (!course) {
      throw new Error('Not found user course.');
    }
    const reviewAi = await this.openAiService.answerLessonQuestion(
      lesson.plan,
      lesson.controlQuestion,
      body.answer,
      course.lang,
      course.user_lang,
      course.level,
    );
    lesson.review = reviewAi.review;
    lesson.answer = body.answer;
    lesson.done = true;
    const lessonUpdated = await this.coursesRepository.updateLesson(lessonId, lesson, userId);
    return lessonUpdated;
  }

  async createLessonContent(userId: string, lessonId: string) {
    let lesson = await this.coursesRepository.findLessonById(lessonId, userId);
    const course = await this.getUserCourse(userId, lesson.course_id);
    if (!course) {
      throw new Error('No lesson content was generated by OpenAI.');
    }
    const content = await this.openAiService.createLessonContent(
      lesson.plan,
      lesson.controlQuestion,
      course?.user_lang,
      course?.lang,
      course.level,
    );
    console.log('Lesson content was generated: ', content);
    lesson.content = content.lessonContent?.lessonContent;
    lesson.homework = content.lessonContent?.homework;
    const lessonUpdated = await this.coursesRepository.updateLesson(lessonId, lesson, userId);
    return lessonUpdated;
  }
}
