import { Body, Controller, Get, Param, ParseUUIDPipe, Post } from '@nestjs/common';
import { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';
import { CoursesService } from './courses.service';
import { CreateApiCourseDto } from './dto/create-course.dto';
import { Permissions } from 'src/decorators/session-permissions.decorator';
import { UserId } from '../../decorators/user-id.decorator';
import { AnswerLessonDto } from './dto/answer-question.dto';

@ApiTags('Courses')
@Controller('courses')
export class CoursesController {
  constructor(private coursesService: CoursesService) { }

  @Post('create')
  @Permissions()
  @ApiOperation({ summary: 'Create a new course', description: 'Creates a new course with its lessons generated by OpenAI based on provided parameters.' })
  @ApiResponse({ status: 201, description: 'Course successfully created.' })
  @ApiResponse({ status: 400, description: 'Bad Request.' })
  @ApiBody({ type: CreateApiCourseDto })
  async createCourse(@UserId() userId: string, @Body() createCourseDto: CreateApiCourseDto) {
    return await this.coursesService.createCourse(createCourseDto, userId);
  }

  @Get()
  @Permissions()
  @ApiOperation({ summary: 'Get user course', description: 'Retrieves the courses (with lessons) for the authenticated user.' })
  @ApiResponse({ status: 200, description: 'Course data retrieved successfully.' })
  async getUserCourses(@UserId() userId: string) {
    return await this.coursesService.findActiveCourses(userId);
  }

  @Get('/:courseId')
  @Permissions()
  @ApiOperation({ summary: 'Get user course', description: 'Retrieves the course (with lessons) for the authenticated user.' })
  @ApiResponse({ status: 200, description: 'Course data retrieved successfully.' })
  async getUserCourse(@UserId() userId: string, @Param('courseId', ParseUUIDPipe) courseId: string) {
    return await this.coursesService.getUserCourse(userId, courseId);
  }

  @Get('/completed')
  @Permissions()
  @ApiOperation({ summary: 'Get completed user course', description: 'Retrieves the completed courses (with lessons) for the authenticated user.' })
  @ApiResponse({ status: 200, description: 'Course data retrieved successfully.' })
  async getUserArchivedCourse(@UserId() userId: string) {
    return await this.coursesService.findCompletedCourses(userId);
  }

  @Get('/:courseId/lessons')
  @Permissions()
  @ApiOperation({ summary: 'Get lessons for a course', description: 'Retrieves all lessons associated with a given course for the authenticated user.' })
  @ApiResponse({ status: 200, description: 'Lessons retrieved successfully.' })
  async getUserCourseLessons(@UserId() userId: string, @Param('courseId', ParseUUIDPipe) courseId: string) {
    return await this.coursesService.findLessonsByCourse(courseId, userId);
  }

  @Post('/:courseId/lessons/:lessonId')
  @Permissions()
  @ApiOperation({ summary: 'Answer lesson control question', description: 'Submits the student’s answer to a lesson’s control question and returns an evaluation.' })
  @ApiResponse({ status: 200, description: 'Lesson answer processed successfully.' })
  @ApiBody({ type: AnswerLessonDto })
  async answerLessonQuestion(
    @UserId() userId: string,
    // @Param('courseId', ParseUUIDPipe) courseId: string,
    @Param('lessonId', ParseUUIDPipe) lessonId: string,
    @Body() answer: AnswerLessonDto,
  ) {
    return await this.coursesService.answerLessonQuestion(userId, lessonId, answer);
  }

  @Post('/:courseId/lessons/:lessonId/content')
  @Permissions()
  @ApiOperation({ summary: 'Generate lesson content', description: 'Generates a detailed interactive lesson content for a given lesson using OpenAI.' })
  @ApiResponse({ status: 200, description: 'Lesson content generated successfully.' })
  async createLessonContent(
    @UserId() userId: string,
    // @Param('courseId', ParseUUIDPipe) courseId: string,
    @Param('lessonId', ParseUUIDPipe) lessonId: string,
  ) {
    return await this.coursesService.createLessonContent(userId, lessonId);
  }
}
